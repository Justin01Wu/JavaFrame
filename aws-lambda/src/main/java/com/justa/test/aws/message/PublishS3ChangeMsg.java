package com.justa.test.aws.message;

import java.util.Map;

import com.amazonaws.services.lambda.runtime.Context;
import com.amazonaws.services.lambda.runtime.RequestHandler;
import com.amazonaws.services.sns.AmazonSNS;
import com.amazonaws.services.sns.AmazonSNSClientBuilder;
import com.amazonaws.services.sns.model.PublishRequest;
import com.amazonaws.services.sns.model.PublishResult;

// comes from https://docs.aws.amazon.com/sns/latest/dg/sns-tutorial-publish-message-to-topic.html
// and https://docs.aws.amazon.com/lambda/latest/dg/java-programming-model-handler-types.html
public class PublishS3ChangeMsg implements RequestHandler<Map<String, Object>, String> {
	
	private final static AmazonSNS snsClient = AmazonSNSClientBuilder.defaultClient();
	// in general all AmazonServiceClient objects are thread-safe.
	// in this static way, we save time and save money
	// https://docs.aws.amazon.com/lambda/latest/dg/best-practices.html

	@Override
	public String handleRequest(Map<String, Object> input, Context context) {		
		
		// most of Lambda input is Map object, which is generated by Jackson, like this:
		/*
		 {
		  Records=[
		    {
		      eventVersion=2.1,
		      eventSource=aws: s3,
		      awsRegion=us-east-1,
		      eventTime=2019-11-01T13: 22: 50.225Z,
		      eventName=ObjectCreated: Put,
		      userIdentity={
		        principalId=AN4PYJ64DU1X5
		      },
		      requestParameters={
		        sourceIPAddress=99.251.63.61
		      },
		      responseElements={
		        x-amz-request-id=DF12783D0B13AC8E,
		        x-amz-id-2=NVHtmuhjVQk7Te/qehNxCJJam40axeXABN77iYT4PjQ2xNBzQ902Byf5g9ZZt2/0E9+DY27h7bI=
		      },
		      s3={
		        s3SchemaVersion=1.0,
		        configurationId=a48601e9-6159-482f-8271-32aaf24f6524,
		        bucket={
		          name=www.justa999.com,
		          ownerIdentity={
		            principalId=AN4PYJ64DU1X5
		          },
		          arn=arn: aws: s3: : : www.justa999.com
		        },
		        object={
		          key=2Columns_flex.html,
		          size=983,
		          eTag=cfe0e4cbe97dfd73f0a1e3144408021d,
		          sequencer=005DBC31AA27824364
		        }
		      }
		    }
		  ]
		}
*/
		 
		
		for(String key: input.keySet()){
			Object value = input.get(key);
			System.out.println("value type: " + value.getClass().getName());
		}
		System.out.println("input: " + input);
		
		String topicArn = System.getenv("SNS_TOPIC_ARN");  //String topicArn = "arn:aws:sns:us-east-1:137200312110:MyTopic";
		if(topicArn == null){
			System.out.println("Didn't find Environment variable SNS_TOPIC_ARN, so do nothing");
			return null;
		}
		
		
		// Publish a message to an Amazon SNS topic.
		final String msg = "An S3 object is just changed: " + input;
		final PublishRequest publishRequest = new PublishRequest(topicArn, msg);
		final PublishResult publishResponse = snsClient.publish(publishRequest);

		// Print the MessageId of the message.
		System.out.println("MessageId: " + publishResponse.getMessageId());
		return publishResponse.getMessageId();
	}
}
