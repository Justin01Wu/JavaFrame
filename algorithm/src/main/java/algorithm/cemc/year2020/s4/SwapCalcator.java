package algorithm.cemc.year2020.s4;

public class SwapCalcator {
	

	public static void main(String[] args) {
		//String data = "AAABBCBBACAAC";
		//String data = "BCBCBCACCA";
		String data = "CACCAACACAACACACAACAACAACCCAAAAACCACCAAACACCACCACCAACACACAACACAAAACCACCCCACACACCAACCACACCCACAACAACCAACCAACACACCAAACCACCAACAACCCCCCAAAAAAACCCAACCAACCCACAACACAAAAAAAAACACCCCAAACCCAACCACCCACAACACCAAACCCCCCCCCACCCACCACCCCAAAAAAACAAAAAAACACAAACCCCCAAAAAAAAACACACCACAACCACACAACACAACCAAAAACAACAAACCCAAAAAACCCAAAACAAACACCCAAAACACCCACCAAAACACCACCCCCACCAAAACCACACCACCCCAACCCACCAACCCCACCCCAAAACCAAAAACACAAACCACACACAAAAACCACACAAACACACCAAACCCCCCACAAAAAAACCAAAAACAACCCACCAAAACCAAACCCACACCCAAACACCAACACCCACACCAACCAAAAACCAACCACCCAACCACCACAACAAAACCAACCCACCACCACCACACCCACACACCAAAACCAAAACAAACCACCAAACAACCCACAACACCCAAAAACCAAACCCCCCCAAAACACCAACCCCACCACCACAAAAACCAACCCACCACCACACACAAAACACACCCCCCCAAAACCCCACAAAAAACCACAACAACCCCAACAACCCAACCCCAACACCACCACACCCCCCAACCAACCAACCCCACAACAAACAAACCAAAAAACCCAACAAACCCCAACCAAAAAACAACACCAAACCCACCACCAAAAAAAAAACAAACCCCCACAACCAACCCACCCCAACAAAACCCAAAAAAAAACCAACCAACCACCACCCCACAACCACAAAACACACCCCACCCCAAAACACAACCACAAACCCAAAAACCCCACCCACACCCCCACACCCCACCACAAACCCCCCAAAAACAACAAAAAACACCAAAAACCCAAAACACAACCCCAAACACCCCCACCCAACAACCCCCCCCCCCACACCAACCCCCCCCACAACAAACAAACACACCAAACACCCAAAAAACCCACAAACACCACCACACCACACCCCACCAAACACACCAAAAAACACCAACCCCAAAAAAACAAACCCCAACCACAAAAACAAACACCACACCAAAAAACACCAACAACACCCACAACAAACCCCACCCAAAAACCCACACAACCACAAACCCCACCCAACCCCCACACAACACCACCAACCCACACACAAAACCCCACACAAAACACACCAAACCACCCCCCAAACCAACCCCAAACACCCAACACCCCACAAACAACAAAACCCCAACAACAACAACCCCACAACCCCCCACACCCACAAAACCACAAAACACCCAACCCCACAAACCCCACACACCCACCCACCACCCAACAACACACCAAAAAACCACCCAACAACCAACCAAAAACCCACCACACCAACACAACCCACACCAAAAAAAAACCCACCCCACCCAAAAAACAAAAAACAAACAAAAAACAAAAAAACACAAACCCACACCAACCAACCACAACACAAACCCAACCAACCCCCAACCACCCAACCCCCAAAAACACCAACACCACCACAACACAACACACCAAAACCACACCACAAAAACACACACACCCACACAAAAACCACCAACACCCCAAACAACAACACCCCCACCACCACACCCAAACAAAACACAACCAACACCAACCACAAACAACACAACAAAAAAAACCAAACAACCAAACCACAAACACCCAACCCACAAACCCCACCAAACACACCCCAACCACACACACACAAAAACACAACACCCCAACAACACACCCCACAACAACCACACACACCACCCCAAAAACCCAAAAAAAAACACAACAACAAACAACAACAACCCACCCAACCCAAAAACAACCACCCCAACCACAACACCCAACACAAAAAACACAACCAAAAACACACCCACCACAACCACCCAAACCCAACACACAACCCAAAACCAACACAAACACCAAACACCCCCCCAACCACCAAACAAAACCAACACCCCAACCACACCACCACAACACAAACACCCCCCCCAAAACCCACAAAAAAACCAACACACAACCCCCAAACAACCCCAAACCACCCCACACACACACACCCCCACCCCAACAAACCCCCCAACACAACAAAACAAAACCACCCCCCAAACCACCACACCCCCACACCCAACAACCACAACCACCACCCCAACCACACCAACCCCACACCACCAACACCCCACAACACACAAACCCCCCAAAACCACAAAAAAACCCCACCACACAACCCAACCACAAACAACCCCACAACCCCACAACCAAAAACCACCACCCACACACCCACACCCAAACACCCAACACAAACAAAAACCAAAACCACAAACAAAACAAAACAAAACCCAAACACACACCCAAACAAAACCCCACCCACACAAAAAACCCCAAAACAACCCAACACCCAAAAACCCACACCAAACAACAAACCAACCACCAACACCCCCAACAACACCCAAACCCCAACCCAAAAACCACCACCCCCCACAAACAACCCAACCACAAAACCCCCAACACAAAAAAAAACCACCCAACCAACCACAAAAACCCCACCCCACCACCCCAACAAAAACCAACCAAACCAACAACCCCAAACAACAAACCACCAAAACAAAACAACACCCCACCAACACCCCCCACACCCCCCCACCACCCACCCACACAAACCAACCAACACACAACACCACCACAAACCCACACCACCAACAAAACACCCCACAAACACAACCCCAACCCACCAAACCAACACACCACACCAACACACAAAAAAACCAAACCCAAAAAACAACAACCAAACAAACCCACCCACCCACACCCCCAAACCCAACCAACAAACCAAACCAAAACCCCCCAACAACACAAACCACACACACCACCCACAAAAACCACAACACCCCAACCCCCCACACACAAACCCAACCCCAAACCCCACACCAAACACCACCCCAAACACCCAACCACACACACCCAACCCCAACAACCCAACACCCAAACCCCACCCCCAACAAACAACCCAACACCCACCCACACACAAACACACAACCCAAAAACAACACCCACCCAACACCAAAACCACCCCACCACACCCACAAAACCCCAAAACCACACCACACCACAAACCCACAACCACCACAAAACCACCCCACAACACCAAAACAAACCCAAACACCCAACACACACAAAACAACCCCCCCACCAAAACAAAAACCACCAACCCCACCAAACACAAAAAACCCACACCCACCCACCAACACAACCACCCAACAAACCCACCACAAACCACCAAAAAACCAAACAAACAACCCAAAAAAACCCACCACCACACAACACAAAACAACCACCACAACCCCCCAACCCACACCAACACAAAACCACCAACACCAACACCCAACCCACACCCCCACAACCCAAAAAAACAACAAAAAAAAAACCAACAAAACAACCCCCACCAACCACACCACCAAACCACAACAACACCCCCAAACACCCACACACAAAAACCCAACAAACCAAAAAAAACCCCAACACCAAAAAAACCACACACCACCCCCCCACCAACCAACAACCACCCCCCCACAACACACCAAACAACACCACACAACACCCCCCAAACAAACCCACACCACCACACACAACACCCACCCACAACCCCAAAAACCAACACCACAACCCCCACCACACAAAACACAACCCCACCACCCAACCCACCAACCCCCCACACAAAAAAAACACCACCAACCACAACCCCAACAAAAACACAACACACACAACACCAACCAACACAAAAACAACACCCCCAAAACCACCCCAACCAACAACACCCACAACCACCACAACCACCCCCAAACAAAACAAAACAAAAAAAAAACAAAACACAAACAAACCCAAACACCCACACACAAACCCCAAAACACACAAACAACCAAAACAACACCACAAAACAACAACAACAAAAACCACACAACCCCACCACACACCACCAACACCCCCAACCCACCAACCCCCACAACCCCACAACACACCCCAACCCACCCAACAAAAAAACCAAACAAAACAAAAAAACACACCACCCCCCCCCCCCCCACACCACAAACAACCCCCAACAAAAACCCCCCCAACACAAACCAACCCCCCCAACACCACAAACCCAACCCCCAACACACCAACCCCCAAACCAACCAACCCACCAAAAACCCCCAACCAACACACAACCCAAACCACACAAAACAAACAAACCCAAAAACCAACACACCACAACCAAACCACCAACCCACACCAACAACCAAACAACCACAAAAACAAAACCAAACCAACCAACAACAAAAACACACCCCACCACACAACAACAACCAACCCCCCAACCAACCCCAAACCACCACCACAAACAAACCCCAAACCCACCAAACACCCCAACACCACAACAACACAACCACACCCCACCCACACCAACCCCCCAACACCACACACAACCCCCACCCAAACACACCAACAAAAAACCCCCCCCAACACAAAACCCAACCCCAAACCCAACCCACACCAAACCAACCACCCACCCCCAAAACACAAAAACCAACAACCAACCAAACCCCACCCCAACACAACCCAAACCACAAACACAAAAAACCCCACAAACCCCCAAAAAACCCAAAACACACCACCAACAACACAAACACCCCCACAAAAAACAACCACCCAAACCACCCACACAAACACCAACAACCCCCACACAACAACCCCAACCCAAAAACACCCCACCCAAAAAAAACACACAAAAAAAAACCCCCCCCCCAAACACCCCCCACACCCACCCACCC";
		
		
		int minSwap = Integer.MAX_VALUE;
		
		//for(int i=0;i<data.length();i++) {
		for(int i=0;i<data.length();i++) {
			
			// left rotate string
			String str = data.substring(i) + data.substring(0, i);
			int total = calcSwap(str);
			System.out.println(total);	
			if(total <minSwap) {
				minSwap = total;
			}
			
		}
		
		System.out.println("result="+ minSwap);
		 
	}
	
	private static int calcSwap(String data) {
		Present p = getAmount(data.toCharArray());
		//int length = data.length();
		
		int aLeft =0;
		int aRight = aLeft+ p.aAmount;
		
		int bLeft = aRight ;
		int bRight = bLeft + p.bAmount;

		int cLeft = bRight ;
		int cRight = cLeft+ p.cAmount;
		
		String a =  data.substring(aLeft, aRight);
		String b =  data.substring(bLeft, bRight);
		String c =  data.substring(cLeft, cRight);
		
		Present pa = getAmount(a.toCharArray());
		Present pb = getAmount(b.toCharArray());
		Present pc = getAmount(c.toCharArray());
		Present[] presents = {pa, pb, pc};
		
		int total = calSawpAmount(presents);
		
		return total;
	}
	
	private static int calSawpAmount(Present[] presents) {
		
		
		
		// swap ab
		int bInAGroup = presents[0].bAmount;
		int aInBGroup = presents[1].aAmount;
		SwapResult sawpAB = calSwap(bInAGroup, aInBGroup);
		
		// swap ac
		int cInAGroup = presents[0].cAmount;
		int aInCGroup = presents[2].aAmount;
		SwapResult sawpAC = calSwap(cInAGroup, aInCGroup);

		// swap bc
		int cInBGroup = presents[1].cAmount;
		int bInCGroup = presents[2].bAmount;
		SwapResult sawpBC = calSwap(cInBGroup, bInCGroup);
		
		//

		int total  = sawpAB.total + sawpAC.total + sawpBC.total;
		int remain = sawpAB.remain + sawpAC.remain + sawpBC.remain;
		
		return total + (remain/3)*2;
		
	}
	
	private static SwapResult calSwap(int bInAGroup, int aInBGroup) {
		SwapResult result =  new SwapResult();
		if(bInAGroup >= aInBGroup) {
			result.remain = bInAGroup - aInBGroup;
			result.total =  aInBGroup;
		}else {
			result.remain = aInBGroup - bInAGroup;
			result.total = bInAGroup;	
		}
		return result;
	}
	
	private static Present getAmount(char[] chars) {
		Present present = new Present();
		for(char c : chars) {
			if(c =='A') {
				present.aAmount ++; 
			}else if(c =='B') {
				present.bAmount ++;
			}else {
				present.cAmount ++;
			}
		}
		return present;
	}
}
