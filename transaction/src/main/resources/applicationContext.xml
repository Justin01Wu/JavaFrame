<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:lang="http://www.springframework.org/schema/lang" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd
        http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

	<context:property-placeholder location="classpath:common.properties" />   
	
	<context:component-scan base-package="ca.justa.transaction" />
	
	<!-- bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean" -->
	<!-- 
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="packagesToScan">
			<list>
				<value>ca.justa.transaction.service</value>
				<value>ca.justa.transaction.bean</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.default_catalog">${hibernate.default_catalog}</prop>
				<prop key="hibernate.default_schema">${hibernate.default_schema}</prop>		
			</props>
		</property>
	</bean>
	 -->
	 
	 
	<!--  it comes from http://howtodoinjava.com/2015/04/06/spring-hibernate-jpa-configuration-example/   -->
	 <!-- This produces a container-managed EntityManagerFactory;
         rather than application-managed EntityManagerFactory as in case of LocalEntityManagerFactoryBean-->
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
      <property name="dataSource" ref="dataSource" />
      <!-- This makes /META-INF/persistence.xml is no longer necessary -->
      
      
		<property name="packagesToScan">
			<list>
				<value>ca.justa.transaction.service</value>
				<value>ca.justa.transaction.bean</value>
			</list>
		</property>
		
      <!-- JpaVendorAdapter implementation for Hibernate EntityManager.
           Exposes Hibernate's persistence provider and EntityManager extension interface -->
      <property name="jpaVendorAdapter">
         <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" />
      </property>
      <property name="jpaProperties">
         <props>
            <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
			<prop key="hibernate.dialect">${hibernate.dialect}</prop>
			<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
			<prop key="hibernate.default_catalog">${hibernate.default_catalog}</prop>
			<prop key="hibernate.default_schema">${hibernate.default_schema}</prop>
         </props>
      </property>
   </bean>
 
	<bean id="programService" class="ca.justa.transaction.service.ProgramServiceImpl">
		<!-- 
		<property name="sessionFactory" ref="sessionFactory" />
		 -->
	</bean>	

 
<!--  
	DriverManagerDataSource is not an actual connection pool; it does not actually pool Connections. 
	It just serves as simple replacement for a full-blown connection pool, implementing the same standard interface, but creating new Connections on every call.

	Useful for test or standalone environments outside of a J2EE container, 
	either as a DataSource bean in a corresponding ApplicationContext or in conjunction with a simple JNDI environment. 
	Pool-assuming Connection.close() calls will simply close the Connection, so any DataSource-aware persistence code should work.
	
	
	please see here for details of this class
	http://docs.spring.io/spring-framework/docs/2.5.6/api/org/springframework/jdbc/datasource/DriverManagerDataSource.html
	
	please see here for how to use a real connection pool:	
	http://stackoverflow.com/questions/5117191/spring-jdbc-connection-pool-best-practices
 -->
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
    	<property name="driverClassName" value="${jdbc.driverClassName}" />
    	<property name="url" value="${jdbc.url}" />
    	<property name="username" value="${jdbc.username}" />
    	<property name="password" value="${jdbc.password}" />
	</bean>
	
	<!-- JPA  -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
  		<property name="entityManagerFactory" ref="entityManagerFactory"/>
	</bean>
	 <!-- Hibernate Session Factory
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
 	-->
 	
	<!-- To make the @Transactional annotation work, you should declare the <tx:annotation-driven> tag -->
	<tx:annotation-driven transaction-manager="transactionManager"/>	
</beans>